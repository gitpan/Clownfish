/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/**
 * Immutable string holding Unicode characters.
 */

class Clownfish::String nickname Str
    inherits Clownfish::Obj {

    const char *ptr;
    size_t      size;
    String     *origin;

    /** Return a new String which holds a copy of the passed-in string.
     * Check for UTF-8 validity.
     */
    inert incremented String*
    new_from_utf8(const char *utf8, size_t size);

    /** Return a new String which holds a copy of the passed-in string.  No
     * validity checking is performed.
     */
    inert incremented String*
    new_from_trusted_utf8(const char *utf8, size_t size);

    /** Initialize the String using the passed-in string.  Do not check
     * validity of supplied UTF-8.
     */
    inert String*
    init_from_trusted_utf8(String *self, const char *utf8, size_t size);

    /** Return a pointer to a new String which assumes ownership of the
     * passed-in string.  Check validity of supplied UTF-8.
     */
    inert incremented String*
    new_steal_utf8(char *utf8, size_t size);

    /** Return a pointer to a new String which assumes ownership of the
     * passed-in string.  Do not check validity of supplied UTF-8.
     */
    inert incremented String*
    new_steal_trusted_utf8(char *utf8, size_t size);

    /** Initialize the String using the passed-in string.  Do not check
     * validity of supplied UTF-8.
     */
    public inert String*
    init_steal_trusted_utf8(String *self, char *utf8, size_t size);

    /** Return a pointer to a new String which wraps an external buffer
     * containing UTF-8.  The buffer must stay unchanged for the lifetime
     * of the String.  Check validity of supplied UTF-8.
     */
    inert incremented String*
    new_wrap_utf8(const char *utf8, size_t size);

    /** Return a pointer to a new String which wraps an external buffer
     * containing UTF-8.  The buffer must stay unchanged for the lifetime
     * of the String.  Do not check validity of supplied UTF-8.
     */
    inert incremented String*
    new_wrap_trusted_utf8(const char *utf8, size_t size);

    /** Initialize the String which wraps an external buffer containing
     * UTF-8.  Do not check validity of supplied UTF-8.
     */
    public inert String*
    init_wrap_trusted_utf8(String *self, const char *utf8, size_t size);

    /** Return a String which holds a single character.
     */
    inert incremented String*
    new_from_char(int32_t code_point);

    /** Return a pointer to a new String which contains formatted data
     * expanded according to CB_VCatF.
     *
     * Note: a user-supplied <code>pattern</code> string is a security hole
     * and must not be allowed.
     */
    inert incremented String*
    newf(const char *pattern, ...);

    /** Perform lexical comparison of two Strings, with level of indirection
     * set to please qsort and friends.
     */
    inert int
    compare(const void *va, const void *vb);

    /** Perform lexical comparison of two Strings, with level of indirection
     * set to please qsort and friends, and return true if <code>a</code> is
     * less than <code>b</code>.
     */
    inert bool
    less_than(const void *va, const void *vb);

    /** Return the concatenation of the String and <code>other</code>.
     */
    incremented String*
    Cat(String *self, String *other);

    /** Return the concatenation of the String and the passed-in raw UTF-8.
     */
    incremented String*
    Cat_Utf8(String *self, const char *ptr, size_t size);

    /** Return the concatenation of the String and the passed-in raw UTF-8.
     * Don't check for UTF-8 validity.
     */
    incremented String*
    Cat_Trusted_Utf8(String *self, const char *ptr, size_t size);

    /** Replace all instances of one character for the other.
     *
     * @return a new String with the characters replaced.
     */
    incremented String*
    Swap_Chars(String *self, int32_t match, int32_t replacement);

    public int64_t
    To_I64(String *self);

    /** Extract a 64-bit integer from a variable-base stringified version.
     */
    int64_t
    BaseX_To_I64(String *self, uint32_t base);

    public double
    To_F64(String *self);

    /** Test whether the String starts with the content of another.
     */
    bool
    Starts_With(String *self, String *prefix);

    /** Test whether the String starts with the passed-in string.
     */
    bool
    Starts_With_Utf8(String *self, const char *prefix, size_t size);

    /** Test whether the String ends with the content of another.
     */
    bool
    Ends_With(String *self, String *postfix);

    /** Test whether the String ends with the passed-in string.
     */
    bool
    Ends_With_Utf8(String *self, const char *postfix, size_t size);

    /** Return the location of the substring within the String (measured in
     * code points), or -1 if the substring does not match.
     */
    int64_t
    Find(String *self, String *substring);

    int64_t
    Find_Utf8(String *self, const char *ptr, size_t size);

    /** Test whether the String matches the passed-in string.
     */
    bool
    Equals_Utf8(String *self, const char *ptr, size_t size);

    /** Return the number of Unicode code points in the object's string.
     */
    size_t
    Length(String *self);

    /** Get the String's <code>size</code> attribute.
     */
    size_t
    Get_Size(String *self);

    /** Return the internal backing array for the String if its internal
     * encoding is UTF-8.  If it is not encoded as UTF-8 throw an exception.
     */
    const char*
    Get_Ptr8(String *self);

    /** Return a NULL-terminated copy of the string data in UTF-8 encoding.
     * The buffer must be freed by the caller.
     */
    char*
    To_Utf8(String *self);

    public incremented String*
    Clone(String *self);

    incremented Obj*
    Inc_RefCount(String *self);

    public void
    Destroy(String *self);

    public bool
    Equals(String *self, Obj *other);

    public int32_t
    Compare_To(String *self, Obj *other);

    public int32_t
    Hash_Sum(String *self);

    public incremented String*
    To_String(String *self);

    /** Remove Unicode whitespace characters from both top and tail.
     */
    String*
    Trim(String *self);

    /** Remove leading Unicode whitespace.
     */
    String*
    Trim_Top(String *self);

    /** Remove trailing Unicode whitespace.
     */
    String*
    Trim_Tail(String *self);

    /** Return the Unicode code point at the specified number of code points
     * in.  Return 0 if the string length is exceeded.  (XXX It would be
     * better to throw an exception, but that's not practical with UTF-8 and
     * no cached length.)
     */
    int32_t
    Code_Point_At(String *self, size_t tick);

    /** Return the Unicode code point at the specified number of code points
     * counted backwards from the end of the string.  Return 0 if outside the
     * string.
     */
    int32_t
    Code_Point_From(String *self, size_t tick);

    /** Return a newly allocated String containing a copy of the indicated
     * substring.
     * @param offset Offset from the top, in code points.
     * @param len The desired length of the substring, in code points.
     */
    incremented String*
    SubString(String *self, size_t offset, size_t len);

    /** Return an iterator to the start of the string.
     */
    incremented StringIterator*
    Top(String *self);

    /** Return an iterator to the end of the string.
     */
    incremented StringIterator*
    Tail(String *self);

    /** Return a stack iterator to the start of the string.
     */
    incremented StackStringIterator*
    StackTop(String *self, void *allocation);

    /** Return a stack iterator to the end of the string.
     */
    incremented StackStringIterator*
    StackTail(String *self, void *allocation);
}

class Clownfish::StackString nickname SStr
    inherits Clownfish::String {

    /**
     * @param allocation A single block of memory which will be used for both
     * the StackString object and its buffer.
     * @param alloc_size The size of the allocation.
     * @param string String to be copied.
     */
    inert incremented StackString*
    new_from_str(void *allocation, size_t alloc_size, String *string);

    inert incremented StackString*
    wrap(void *allocation, String *source);

    inert incremented StackString*
    wrap_str(void *allocation, const char *ptr, size_t size);

    /** Return the size for a StackString struct.
     */
    inert size_t
    size();

    /** Throws an error.
     */
    public void
    Destroy(StackString *self);
}

class Clownfish::StringIterator nickname StrIter
    inherits Clownfish::Obj {

    String *string;
    size_t  byte_offset;

    inert incremented StringIterator*
    new(String *string, size_t byte_offset);

    /** Return the substring between the top and tail iterators.
     * @param offset Top iterator. Use start of string if NULL.
     * @param len Tail iterator. Use end of string if NULL.
     */
    inert incremented String*
    substring(StringIterator *top, StringIterator *tail);

    public incremented StringIterator*
    Clone(StringIterator *self);

    public void
    Assign(StringIterator *self, StringIterator *other);

    public bool
    Equals(StringIterator *self, Obj *other);

    public int32_t
    Compare_To(StringIterator *self, Obj *other);

    /** Return true if the iterator is not at the end of the string.
     */
    public bool
    Has_Next(StringIterator *self);

    /** Return true if the iterator is not at the start of the string.
     */
    public bool
    Has_Prev(StringIterator *self);

    /** Return the code point after the current position and advance the
     * iterator. Return CFISH_STRITER_DONE at the end of the string.
     */
    public int32_t
    Next(StringIterator *self);

    /** Return the code point before the current position and go one step back.
     * Return CFISH_STRITER_DONE at the start of the string.
     */
    public int32_t
    Prev(StringIterator *self);

    /** Skip code points.
     * @param num The number of code points to skip.
     * @return the number of code points actually skipped. This can be less
     * than the requested number if the end of the string is reached.
     */
    public size_t
    Advance(StringIterator *self, size_t num);

    /** Skip code points backward.
     * @param num The number of code points to skip.
     * @return the number of code points actually skipped. This can be less
     * than the requested number if the start of the string is reached.
     */
    public size_t
    Recede(StringIterator *self, size_t num);

    /** Skip whitespace.
     * @return the number of code points skipped.
     */
    public size_t
    Skip_Next_Whitespace(StringIterator *self);

    /** Skip whitespace backward.
     * @return the number of code points skipped.
     */
    public size_t
    Skip_Prev_Whitespace(StringIterator *self);

    /** Test whether the content after the iterator starts with
     * <code>prefix</code>.
     */
    bool
    Starts_With(StringIterator *self, String *prefix);

    /** Test whether the content after the iterator starts with the passed-in
     * string.
     */
    bool
    Starts_With_Utf8(StringIterator *self, const char *prefix, size_t size);

    /** Test whether the content before the iterator ends with
     * <code>postfix</code>.
     */
    bool
    Ends_With(StringIterator *self, String *postfix);

    /** Test whether the content before the iterator ends with the passed-in
     * string.
     */
    bool
    Ends_With_Utf8(StringIterator *self, const char *postfix, size_t size);

    public void
    Destroy(StringIterator *self);
}

class Clownfish::StackStringIterator nickname SStrIter
    inherits Clownfish::StringIterator {

    inert incremented StackStringIterator*
    new(void *allocation, String *string, size_t byte_offset);

    public void
    Destroy(StackStringIterator *self);
}

__C__

#define CFISH_SSTR_BLANK() \
   cfish_SStr_wrap_str(cfish_alloca(cfish_SStr_size()), "", 0)

#define CFISH_SSTR_WRAP(source) \
    cfish_SStr_wrap(cfish_alloca(cfish_SStr_size()), source)

#define CFISH_SSTR_WRAP_UTF8(ptr, size) \
    cfish_SStr_wrap_str(cfish_alloca(cfish_SStr_size()), ptr, size)

#define CFISH_STRITER_DONE  -1

#ifdef CFISH_USE_SHORT_NAMES
  #define SSTR_BLANK             CFISH_SSTR_BLANK
  #define SSTR_WRAP              CFISH_SSTR_WRAP
  #define SSTR_WRAP_UTF8         CFISH_SSTR_WRAP_UTF8
  #define STRITER_DONE           CFISH_STRITER_DONE
#endif
__END_C__


